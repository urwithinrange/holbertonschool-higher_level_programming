>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix1 = [[1, 3, 5],[7, 9, 11]]
>>> matrix2 = [[10, 24, 50],[78, 20, 13],[20.1, 21, 3.3]]
>>> mix_matrix = [[1, "3"], [4, 5]]
>>> unevn_matrix = [[10, 24], [1, 20.1, 21, 3.3]]
>>> matrix_inf_flt = [[float('nan'), 3, 5],[7, 9, 11]]

>>> print(matrix_divided(matrix1, 40))
[[0.03, 0.07, 0.12], [0.17, 0.23, 0.28]]

>>> print(matrix_divided(matrix2, 40))
[[0.25, 0.6, 1.25], [1.95, 0.5, 0.33], [0.5, 0.53, 0.08]]

>>> print(matrix_divided(mix_matrix, 40))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided(unevn_matrix, 40))
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> print(matrix_divided(matrix1, 0))
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> print(matrix_divided(matrix1, float('nan')))
[[nan, nan, nan], [nan, nan, nan]]

>>> print(matrix_divided(matrix_inf_flt, 40))
[[nan, 0.07, 0.12], [0.17, 0.23, 0.28]]

>>> print(matrix_divided(matrix1, "a"))
Traceback (most recent call last):
...
TypeError: div must be a number

>>> print(matrix_divided("mat", 40))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided(float('nan'), 40))
Traceback (most recent call last):
...
TypeError: 'float' object is not iterable
